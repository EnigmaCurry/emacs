#+TITLE: Emacs Configuration
#+AUTHOR: Ryan McGuire

Declaring Emacs bankruptcy (again) and starting a new literate config
using Org mode.

All packages are configured with [[https://github.com/jwiegley/use-package][use-package]]

Much of this adapted from [[https://github.com/danielmai/.emacs.d][danelmai's config]]

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Ryan McGuire"
      user-mail-address "ryan@enigmacurry.com")
#+end_src
* Global keybindings
  Let's reinvent our muscle memory by unbinding the arrow and page up/down keys.

  #+BEGIN_SRC emacs-lisp
  (mapc 'global-unset-key '([left] [right] [up] [down] [prior] [next]))
  #+END_SRC
  
  Let's use key chords for easy non-modal movement keys.

  #+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :init
    (key-chord-mode 1)
    (key-chord-define-global "ji" 'backward-char)
    (key-chord-define-global "ko" 'forward-char)
    (key-chord-define-global "io" 'previous-line)
    (key-chord-define-global "ui" 'previous-line)
    (key-chord-define-global "jk" 'next-line)
    (key-chord-define-global "kl" 'next-line)
    )
  #+END_SRC

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src
* Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq-default indent-tabs-mode nil)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(column-number-mode t)

(global-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")

;; Visible bell:
;(setq visible-bell t)
;; Turn off bell completely:
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
#+end_src

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src

Here we make page-break characters look pretty, instead of appearing
as =^L= in Emacs. [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][Here's an informative article called "Using
Page-Breaks in GNU Emacs" by Eric J. M. Ritz.]]

#+begin_src emacs-lisp
(use-package page-break-lines
  :ensure t)
#+end_src

Who uses suspend?
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))
#+END_SRC

* Themes
** Theme functions
#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src
** Monokai theme
#+begin_src emacs-lisp :tangle no
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil)
  (switch-theme 'monokai)
)
#+end_src
* Transparent Background
#+BEGIN_SRC 
 (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
 (add-to-list 'default-frame-alist '(alpha . (85 . 50)))
 (defun transparency-toggle ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(85 . 50) '(100 . 100)))))
(transparency-toggle)
#+END_SRC
* Font
Default font:

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Ubuntu Mono-24"))
#+end_src

Display emojis. Source of system-specific fonts is in [[https://github.com/syohex/emacs-ac-emoji][the README for
the emacs-ac-emoji package.]]

#+BEGIN_SRC emacs-lisp
(let ((font (if (= emacs-major-version 25)
                "Symbola"
              (cond ((string-equal system-type "darwin")    "Apple Color Emoji")
                    ((string-equal system-type "gnu/linux") "Symbola")))))
  (set-fontset-font t 'unicode font nil 'prepend))
#+END_SRC

* Emacsclient
Start the client server

#+begin_src emacs-lisp
(use-package server
  :config
  (server-start))
#+end_src
* Ido

Ido makes finding files/buffers/etc much easier

#+begin_src emacs-lisp
(use-package ido
  :init
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)
  (use-package ido-vertical-mode
    :ensure t
    :defer t
    :init 
    ; Use more space in the mini buffer
    (ido-vertical-mode 1)
    ;remember buffers opened in previous sessions
    (setq ido-use-virtual-buffers t)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
#+end_src
  
* ELPA packages
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :init
  ; use company-mode everywhere
  (add-hook 'after-init-hook 'global-company-mode)
  )
#+END_SRC
** Avy
   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :init
     (global-set-key (kbd "C-z") 'avy-goto-char-timer)
     )
   #+END_SRC
** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src
*** Fullscreen magit
#+begin_src emacs-lisp
;; full screen magit-status

(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))

#+end_src
#+BEGIN_SRC emacs_lisp


#+END_SRC
** Gists

#+BEGIN_SRC emacs-lisp
(use-package gist
  :init
  (setq gist-view-gist t) ; view gist in browser on create
  :ensure t
  :commands gist-list)
#+END_SRC

** Rainbow mode
This minor mode sets background color to strings that match color
names, e.g. #0000ff is displayed in white with a blue background.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :config
  ;(add-hook 'html-mode-hook 'rainbow-mode)
  (add-hook 'css-mode-hook 'rainbow-mode))

#+END_SRC

** Emmet

According to [[http://emmet.io/][their website]], "Emmet â€” the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode))
#+end_src

** Zoom-frm

=zoom-frm= is a nice package that allows you to resize the text of
entire Emacs frames (this includes text in the buffer, mode line, and
minibuffer). The =zoom-in/out= command acts similar to the
=text-scale-adjust= command---you can chain zooming in, out, or
resetting to the default size once the command has been initially
called.

Changing the =frame-zoom-font-difference= essentially enables a
"presentation mode" when calling =toggle-zoom-frame=.

#+begin_src emacs-lisp
(use-package zoom-frm
  :ensure t
  :bind (("C-M-=" . zoom-in/out)
         ("H-z"   . toggle-zoom-frame)
         ("s-<f1>" . toggle-zoom-frame))
  :config
  (setq frame-zoom-font-difference 15))
#+end_src

** Scratch

Convenient package to create =*scratch*= buffers that are based on the
current buffer's major mode. This is more convienent than manually
creating a buffer to do some scratch work or reusing the initial
=*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch
  :ensure t
  :commands scratch)
#+end_src

** Shell pop

Quickly open and close a shell

#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :ensure t
  :bind ("C-c t" . shell-pop)
  :init
  (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell))))))
#+END_SRC

** Quickrun

#+BEGIN_SRC emacs-lisp
(use-package quickrun
  :defer 10
  :ensure t
  :bind ("s-q" . quickrun))
#+END_SRC

** Javascript

*** Venerable JS2 mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
  :config
  (setq js2-basic-offset 2) ; Use two spaces for indentation
  (setq js2-strict-missing-semi-warning nil); Don't enforce semicolons
)
#+END_SRC

**** js2-refactor
#+BEGIN_SRC emacs-lisp
(use-package js2-refactor
  :ensure t
  :init
  (add-hook 'js2-mode-hook #'js2-refactor-mode)
)
#+END_SRC

*** Flycheck enabled eslint:

#+BEGIN_SRC emacs-lisp
(use-package eslint-fix
  :ensure t
  :init
  (eval-after-load 'js2-mode
    '(add-hook 'js2-mode-hook 
               (lambda () 
                 (add-hook 'after-save-hook 
                           (lambda ()
                             (eslint-fix)
                             ;(revert-buffer nil t)
                             ))
                 (flycheck-mode))))
)
#+END_SRC


*** Tern.js code introspection and completion:
# #+BEGIN_SRC emacs-lisp
# (use-package tern
#   :ensure t
#   :init
#   (eval-after-load 'tern
#     '(progn
#        (require 'tern-auto-complete)
#        (tern-ac-setup)))
#   (add-hook 'js-mode-hook 
#             (lambda () 
#               (tern-mode t) 
#               (auto-complete-mode)))
#   )
# (use-package tern-auto-complete
#   :ensure t
#   :config
#   (setq tern-ac-on-dot t)
# )
# #+END_SRC
** Web mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :init
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  (setq web-mode-enable-auto-quoting nil)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  )
#+END_SRC
** Typescript
#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))
(use-package tide
  :ensure t
  :config
  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)
  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)
  (add-hook 'typescript-mode-hook #'setup-tide-mode)
  ;; format options
  (setq tide-format-options '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))
  )
#+END_SRC
** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)
         ("\\.markdown\\'" . orgtbl-mode)
         ("\\.md\\'"       . orgtbl-mode))
)

;; Convert Org-mode table to Github Flavored Markdown
;; https://gist.github.com/yryozo/5807243
;; http://stackoverflow.com/questions/14275122/editing-markdown-pipe-tables-in-emacs#20912535
;;  
;; <!-- 
;; #+ORGTBL: SEND $1 orgtbl-to-gfm
;; | $0 | 
;; -->

(defun orgtbl-to-gfm (table params)
  "Convert the Orgtbl mode TABLE to GitHub Flavored Markdown."
  (let* ((alignment (mapconcat (lambda (x) (if x "|--:" "|---"))
                               org-table-last-alignment ""))
         (params2
          (list
           :splice t
	   :hline (concat alignment "|")
           :lstart "| " :lend " |" :sep " | ")))
    (orgtbl-to-generic table (org-combine-plists params2 params))))

#+end_src

** Projectile mode

Work on project directories
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands (projectile-mode projectile-switch-project)
  :bind ("C-c p p" . projectile-switch-project)
  :config
  (projectile-global-mode t)
  (setq projectile-enable-caching t)
  (setq projectile-switch-project-action 'projectile-dired))
#+end_src

** Minimap

Sublime text like miniature buffer sidebar

#+begin_src emacs-lisp
(use-package minimap
  :ensure t
  :init
  ;(minimap-mode)
)
#+end_src
** YAML mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
)

#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  )
#+END_SRC
** Pug
#+BEGIN_SRC emacs-lisp
(use-package pug-mode
  :ensure t
  )
#+END_SRC
** Dired+
#+BEGIN_SRC emacs-lisp
(use-package dired+
  :ensure t
  :config
  ; Don't open new buffers when visiting directories in dired
  (diredp-toggle-find-file-reuse-dir 1)
  )
#+END_SRC
** Neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config
  (global-set-key [f8] 'neotree-toggle)
  (setq neo-theme 'nerd)
  )
(use-package all-the-icons
  ;used for the icons theme
  ;but make sure to install the TTFs from the repo:
  ; https://github.com/domtronn/all-the-icons.el/tree/master/fonts
  :ensure t
)
#+END_SRC

** ox-hugo
   Blogging in org-mode with [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]]!

   By default, ox-hugo expects your blog posts to be subtrees within a
   single org document. I prefer to have each post in a seperate Org
   files in the =my/org-hugo-src-dir= directory. This way, I can have
   people download the source file for a single post, and execute the
   Org-Babel in it, without being distracted with all the other posts.

   #+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :ensure t
  :after ox
  :init
  (defconst my/hugo-org-content-dir (expand-file-name "~/git/blog/src/blog")
    "Directory containing the Org mode posts.")

  (defun my/org-hugo-publish-current-buffer-as-post ()
    "Export the current Org file if a valid Hugo post.
Current file is exported using `org-hugo-export-to-md' if it
contains the #+TITLE keyword and is present in the
`my/hugo-org-content-dir'."
    (let ((fname (buffer-file-name)))
      (when (and fname
                 (string-match-p (concat "\\`" (regexp-quote my/hugo-org-content-dir) ".*\.org\\'")
                                 fname))
        (save-excursion
          (goto-char (point-min))
          (if (< (how-many "^#\\+TITLE:") 1)
              (message "Unable to export as the Org file is missing the #+TITLE keyword.")
            (org-hugo-export-to-md))))))

  (defun my/org-mode-hook-fn ()
    "My Org mode customization."
    (add-hook 'after-save-hook #'my/org-hugo-publish-current-buffer-as-post :append :local))

  (add-hook 'org-mode-hook #'my/org-mode-hook-fn))
   #+END_SRC

* Python

Integrates with IPython.

#+begin_src emacs-lisp
(use-package python-mode
  :defer t
  :ensure t)
#+end_src

* Org mode
** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

*** Org agenda

#+begin_src emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/Dropbox/Agenda"))))
#+end_src

*** Org capture

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/Notes/notes.org")
#+end_src

** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+begin_src emacs-lisp
(setq org-image-actual-width 550)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** Org babel languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (shell . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

** Org exporting

*** Pandoc exporter

Pandoc converts between a huge number of different file formats. 

#+begin_src emacs-lisp
(use-package ox-pandoc
  :no-require t
  :defer 10
  :ensure t)
#+end_src
*** LaTeX exporting

I've had issues with getting BiBTeX to work correctly with the LaTeX exporter for PDF exporting. By changing the command to `latexmk` references appear in the PDF output like they should. Source: http://tex.stackexchange.com/a/161619.

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -pdf %f"))
#+END_SRC
* Smart TAB completion
This is giving me some problems so this is left unbound for now.
#+BEGIN_SRC emacs-lisp
(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "->") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))

;(global-set-key [tab] 'tab-indent-or-complete)
#+END_SRC
