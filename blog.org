#+HUGO_BASE_DIR: /home/ryan/.emacs.d/blog
#+HUGO_WEIGHT: auto

* Make your own website like this
:PROPERTIES:
:EXPORT_HUGO_SECTION: ox-hugo
:EXPORT_FILE_NAME: _index
:END:
This is the source for my website at [[https://blog.rymcg.tech][blog.rymcg.tech]], a technology
blog written in [[http://orgmode.org/][org-mode]] and published with [[https://github.com/kaushalmodi/ox-hugo/][ox-hugo]]. 

The sections below contain the entirety of the website: the articles
and blog posts, its configuration, the templates, themes, build process,
and deployment scripts. If my website were to go down, I could
recreate it from nothing but this file (plus any static assets, images.)

This is a self-documenting deployment environment, using a literate
programming style written with [[http://org-babel.readthedocs.io][org-babel]] code blocks. Download the
[the org source file] and you can edit it to make any customizations,
and build your own website just like this one. 

** Dependencies
My configuration consists of:

- [[https://www.gnu.org/software/emacs/][Emacs]] 25
- [[https://www.gnu.org/software/emacs/][Org Mode]] 9 from the [[http://orgmode.org/elpa.html][project repos]]
- [[https://gohugo.io/][Hugo]] git:master
 - I'm using a [[https://gist.github.com/kaushalmodi/456b5ea26b3e869e5d63d4a67b85f676][dev build using this script]], until [[https://github.com/alecthomas/chroma/commit/cbc3d5b9f01cbd0113748fa12d9d0cb9cfdda537][this fix is in]].

Install Emacs, org-mode, and hugo, by following the links above.

** ox-hugo
This is the main config, it configures ox-hugo, initializes our blog
directory, and the sets up hugo server to run inside an Emacs eshell.

#+NAME: ox-hugo-init
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/blog.el
(defun rymcg/org-babel-eval-blocks-in-file (filepath block-list)
  "Open an Org file and eval a list of named code blocks in it"
  (save-window-excursion
    (find-file filepath)
    (dolist (codeblock block-list)
      (org-babel-goto-named-src-block codeblock)
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-execute-src-block-maybe)))))

(use-package ox-hugo
  :ensure t
  :after ox
  :init
  (setq org-hugo-external-file-extensions-allowed-for-copying 
        '(org tex jpg png svg pdf))
  (setq my/blog-file (expand-file-name "~/.emacs.d/blog.org"))
  (setq my/hugo-root (expand-file-name "~/.emacs.d/blog"))
  (setq my/hugo-server-url "http://localhost:1313")
  
  (defun blog-init ()
    ; Tangle all files:
    (org-babel-tangle-file my/blog-file)
    ; Create theme files if necessary:
    (rymcg/org-babel-eval-blocks-in-file my/blog-file '("hugo-import-theme")))
  (blog-init)

  (defun hugo-server-start ()
    "Start hugo server in an inferior shell"
    (interactive)
    (let ((eshell-buffer-name (concat "*hugo-server-" my/hugo-root "*")))
      (if (bufferp (get-buffer eshell-buffer-name))
          (kill-buffer eshell-buffer-name))
      (eshell)
      (eshell-return-to-prompt)
      (insert (concat "cd " my/hugo-root))
      (eshell-send-input)
      (insert "hugo server -D --navigateToChanged")
      (eshell-send-input)
      (browse-url my/hugo-server-url)
      (message eshell-buffer-name))))
#+END_SRC

** Hugo site skeleton
Here's my main hugo config file:

#+BEGIN_SRC yml :tangle ~/.emacs.d/blog/config.yml :eval no :mkdirp yes
### This file is auto-generated. Do not edit! 
### Your changes will get overwritten. 
### Look in ~/.emacs.d/config.org for the source.

baseURL: "http://blog.rymcg.tech/"
languageCode: "en-us"
DefaultContentLanguage: "en"

title: "rymcg.tech"
theme: "docdock"

pygmentsCodeFences: true
pygmentsUseClasses: true

params:
  noHomeIcon: true
  noSearch: false
  showVisitedLinks: true
  ordersectionsby: "weight"
  themeVariant: "rymcg"
  subTitle: "Technology by Ryan McGuire"
  
outputs:
  home:
    - HTML
    - RSS
    - JSON

mediaTypes:
  "text/plain":
    suffix: "org"
#+END_SRC

Create our site header:
#+BEGIN_SRC markdown :mkdirp yes :eval no :tangle ~/.emacs.d/blog/content/_header.md
rymcg.tech
#+END_SRC
   
Import the theme:

#+NAME: hugo-import-theme
#+BEGIN_SRC shell :dir ~/.emacs.d/blog :results none
if [ ! -d themes/docdock ]; then
    mkdir -p themes
    git submodule add -f https://github.com/EnigmaCurry/hugo-theme-docdock themes/docdock
fi
#+END_SRC

Create our own theme variant:

#+BEGIN_SRC css :mkdirp yes :eval no :tangle ~/.emacs.d/blog/static/css/theme-rymcg.css
:root{
    --MAIN-BACK-color:#ddd;
    --MAIN-TXT-color: #000;
    --MAIN-LINK-color:#3995b1;
    --MAIN-HOVER-color:#c51212;
    --SIDE-MAIN-color:#444;
    --SIDE-MAIN-TXT-color:#fff;
    --SIDE-FOCUS-BACK-color:#707070;
    --SIDE-FOCUS-FORE-color:black;
    --MENU-LINK-color:#fff;
    --MENU-ACTIVE-BACK-color:#505050;
    --MENU-ACTIVE-LINK-color:white;
    --NAV-HOVER-color:#bbb;
}
#header-wrapper {
    border-bottom: none;
}
#sidebar ul li.visited > a .read-icon {
	color: var(--SIDE-MAIN-color);
}
a {
    color: var(--MAIN-LINK-color);
}
a:hover {
    color: var(--MAIN-HOVER-color);
}
body {
    background-color: var(--MAIN-BACK-color);
    color: var(--MAIN-TXT-color) !important;
}
#body a.highlight:after {
    background-color: var(--MAIN-HOVER-color);
}
#sidebar {
	background-color: var(--SIDE-MAIN-color);
}
#sidebar #header-wrapper {
    background: var(--SIDE-MAIN-color);
    color: var(--BF-color)
    border-color: var(--SIDE-FOCUS-BACK-color);
}
#sidebar .searchbox {
	border-color: var(--BF-color);
    background: var(--SIDE-FOCUS-BACK-color);
}
#sidebar ul.topics > li.parent, #sidebar ul.topics > li.active {
    background: var(--SIDE-FOCUS-BACK-color);
}
#sidebar .searchbox * {
    color: var(--SIDE-FOCUS-FORE-color);
}
#sidebar a , #sidebar a:hover {
    color: var(--MENU-LINK-color);
}
#sidebar .parent li, #sidebar .active li {
    border-color: var(--MENU-ACTIVE-LINK-color);
}
#sidebar ul li.active > a {
    background: var(--MENU-ACTIVE-BACK-color);
    color: var(--MENU-ACTIVE-LINK-color) !important;
}
#sidebar ul li .category-icon {
	color: var(--MENU-LINK-color);
}
#sidebar #shortcuts h3 {
    color: var(--SIDE-MAIN-TXT-color);
}

.footline {
	border-color: var(--SIDE-FOCUS-BACK-color);
}

div.block-header {
    color: #fff;
    padding-left: 1em;
    font-family: monospace;
    font-weight: bold;
    border-radius: 8px 8px 0 0;
}
div.block-header.fn {
    background-color: #4e3a82;    
}
div.block-header.exec {
    background-color: #b93838;    
}
div.block-header.example {
    background-color: #4d4b54;
}
.copy-to-clipboard {
    margin-top: -1px;
}
pre {
    border-radius: 0 0 8px 8px;
}
pre .copy-to-clipboard {
    background-color: #fff;
    border: 1px solid #272a2c !important;
}
pre .copy-to-clipboard:hover {
    background-color: #ffa;
}

div#tags {
    float: none;
}
div#breadcrumbs {
    width: calc(100% - 20px);
}
div#body-inner {
    max-width: 100ch;
}
div#body-inner pre {
    margin-top: 0;
}

#body .nav:hover {
    background-color: var(--NAV-HOVER-color);
}
#+END_SRC

Most syntax highlighting is done with Chroma, which is builtin to
hugo. The site uses the =perldoc= theme:

#+BEGIN_SRC css :tangle ~/.emacs.d/blog/static/css/theme-rymcg.css
/* perldoc syntax highlight style */
/* Background */ .chroma { background-color: #eeeedd }
/* Error */ .chroma .err { color: #a61717; background-color: #e3d2d2 }
/* LineHighlight */ .chroma .hl { background-color: #ffffcc; display: block; width: 100% }
/* LineNumbers */ .chroma .ln { ; margin-right: 0.4em; padding: 0 0.4em 0 0.4em; }
/* Keyword */ .chroma .k { color: #8b008b; font-weight: bold }
/* KeywordConstant */ .chroma .kc { color: #8b008b; font-weight: bold }
/* KeywordDeclaration */ .chroma .kd { color: #8b008b; font-weight: bold }
/* KeywordNamespace */ .chroma .kn { color: #8b008b; font-weight: bold }
/* KeywordPseudo */ .chroma .kp { color: #8b008b; font-weight: bold }
/* KeywordReserved */ .chroma .kr { color: #8b008b; font-weight: bold }
/* KeywordType */ .chroma .kt { color: #00688b; font-weight: bold }
/* NameAttribute */ .chroma .na { color: #658b00 }
/* NameBuiltin */ .chroma .nb { color: #658b00 }
/* NameClass */ .chroma .nc { color: #008b45; font-weight: bold }
/* NameConstant */ .chroma .no { color: #00688b }
/* NameDecorator */ .chroma .nd { color: #707a7c }
/* NameException */ .chroma .ne { color: #008b45; font-weight: bold }
/* NameFunction */ .chroma .nf { color: #008b45 }
/* NameNamespace */ .chroma .nn { color: #008b45 }
/* NameTag */ .chroma .nt { color: #8b008b; font-weight: bold }
/* NameVariable */ .chroma .nv { color: #00688b }
/* LiteralString */ .chroma .s { color: #cd5555 }
/* LiteralStringAffix */ .chroma .sa { color: #cd5555 }
/* LiteralStringBacktick */ .chroma .sb { color: #cd5555 }
/* LiteralStringChar */ .chroma .sc { color: #cd5555 }
/* LiteralStringDelimiter */ .chroma .dl { color: #cd5555 }
/* LiteralStringDoc */ .chroma .sd { color: #cd5555 }
/* LiteralStringDouble */ .chroma .s2 { color: #cd5555 }
/* LiteralStringEscape */ .chroma .se { color: #cd5555 }
/* LiteralStringHeredoc */ .chroma .sh { color: #1c7e71; font-style: italic }
/* LiteralStringInterpol */ .chroma .si { color: #cd5555 }
/* LiteralStringOther */ .chroma .sx { color: #cb6c20 }
/* LiteralStringRegex */ .chroma .sr { color: #1c7e71 }
/* LiteralStringSingle */ .chroma .s1 { color: #cd5555 }
/* LiteralStringSymbol */ .chroma .ss { color: #cd5555 }
/* LiteralNumber */ .chroma .m { color: #b452cd }
/* LiteralNumberBin */ .chroma .mb { color: #b452cd }
/* LiteralNumberFloat */ .chroma .mf { color: #b452cd }
/* LiteralNumberHex */ .chroma .mh { color: #b452cd }
/* LiteralNumberInteger */ .chroma .mi { color: #b452cd }
/* LiteralNumberIntegerLong */ .chroma .il { color: #b452cd }
/* LiteralNumberOct */ .chroma .mo { color: #b452cd }
/* OperatorWord */ .chroma .ow { color: #8b008b }
/* Comment */ .chroma .c { color: #228b22 }
/* CommentHashbang */ .chroma .ch { color: #228b22 }
/* CommentMultiline */ .chroma .cm { color: #228b22 }
/* CommentSingle */ .chroma .c1 { color: #228b22 }
/* CommentSpecial */ .chroma .cs { color: #8b008b; font-weight: bold }
/* CommentPreproc */ .chroma .cp { color: #1e889b }
/* CommentPreprocFile */ .chroma .cpf { color: #1e889b }
/* GenericDeleted */ .chroma .gd { color: #aa0000 }
/* GenericEmph */ .chroma .ge { font-style: italic }
/* GenericError */ .chroma .gr { color: #aa0000 }
/* GenericHeading */ .chroma .gh { color: #000080; font-weight: bold }
/* GenericInserted */ .chroma .gi { color: #00aa00 }
/* GenericOutput */ .chroma .go { color: #888888 }
/* GenericPrompt */ .chroma .gp { color: #555555 }
/* GenericStrong */ .chroma .gs { font-weight: bold }
/* GenericSubheading */ .chroma .gu { color: #800080; font-weight: bold }
/* GenericTraceback */ .chroma .gt { color: #aa0000 }
/* TextWhitespace */ .chroma .w { color: #bbbbbb }
#+END_SRC

As a fallback, highlight.js is used for blocks that chroma can't
handle. Here's a slight mod of the =purebasic= theme:

#+BEGIN_SRC css :tangle ~/.emacs.d/blog/static/css/hybrid.css
.hljs {
	background: #eeeedd !important;
	display: block;
	overflow-x: auto;
	padding: 0.5em;
}
.hljs,.hljs-type,.hljs-function,.hljs-name,.hljs-number,.hljs-attr,.hljs-params,.hljs-subst {
	color: #000000;
}
.hljs-comment,.hljs-regexp,.hljs-section,.hljs-selector-pseudo,.hljs-addition {
	color: #00AAAA;
}
.hljs-title,.hljs-tag,.hljs-variable,.hljs-code {
	color: #006666;
}
.hljs-keyword,.hljs-class,.hljs-meta-keyword,.hljs-selector-class,.hljs-built_in,.hljs-builtin-name {
	color: #006666;
	font-weight: bold;
}
.hljs-string,.hljs-selector-attr {
	color: #0080FF;
}
.hljs-symbol,.hljs-link,.hljs-deletion,.hljs-attribute {
	color: #924B72;
}
.hljs-meta,.hljs-literal,.hljs-selector-id {
	color: #924B72;
	font-weight: bold;
}
.hljs-strong,.hljs-name {
	font-weight: bold;
}
.hljs-emphasis {
	font-style: italic;
}
#+END_SRC

** Code block headers
When reading code blocks in Org file source it's pretty easy to see
what file it's referring to, by looking at the =:tangle= parameter:

#+BEGIN_EXAMPLE org
#+BEGIN_SRC emacs-lisp :tangle /some/path/example.el
  (messsage "example")
#+END_SRC
#+END_EXAMPLE

But when this is exported to HTML, you don't get to see the =:tangle=
part, which means either the reader has to infer it from the context,
or you need to add extra text to the document. The first form is
confusing to the user reading in his web browser. The latter form
means you're repeating yourself, and when you refactor path names, you
will have an additional thing you need to edit, or else an opportunity
arises for the documentation to diverge from the code. Messy.

Let's automatically add headers to all the code blocks exported to
HTML.

 - Tangled code should have header with =Create in $FILE=
 - Shell code blocks should have header with =Run in $DIR= 
 - Example blocks should have header with =Example= 

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/blog.el
; original credit to John Kitchin - https://stackoverflow.com/a/38876439/56560
(defun rymcg/org-hugo-add-tangle-names-to-export (backend)
  (let ((src-blocks (org-element-map (org-element-parse-buffer) 'src-block #'identity)))
    (setq src-blocks (nreverse src-blocks))
    (loop for src in src-blocks
          do
          (goto-char (org-element-property :begin src)) 
          (let ((tangled-name (cdr (assoc :tangle (nth 2 (org-babel-get-src-block-info)))))
                (directory (cdr (assoc :dir (nth 2 (org-babel-get-src-block-info)))))
                (language-name (first (org-babel-get-src-block-info))))
            (if (not (equal tangled-name "no"))
                                        ; tangle files get a header for the file name:
                (insert (format "\n#+HTML: <div class='block-header fn'>Create in %s</div>\n" tangled-name))
              (if (equal language-name "shell")
                                        ; Non-tangled shell scripts get a header indicating to run it:
                                        ; Show the directory if it's set:
                  (insert (format "\n#+HTML: <div class='block-header exec'>Run%s</div>\n" 
                                  (if (equal directory nil) "" (format " in %s" directory)))))))))
  (let ((example-blocks (org-element-map (org-element-parse-buffer) 'example-block #'identity)))
    (setq example-blocks (nreverse example-blocks))
    (loop for example in example-blocks
          do
          (goto-char (org-element-property :begin example))
          (insert (format "\n#+HTML: <div class='block-header example'>Example</div>\n")))))

(defadvice org-hugo-export-subtree-to-md (around org-hugo-export-advice)
  (let ((org-export-before-processing-hook '(rymcg/org-hugo-add-tangle-names-to-export)))
    ad-do-it))
(ad-activate 'org-hugo-export-subtree-to-md)
#+END_SRC

* Front Page
:PROPERTIES:
:TITLE: rymcg.tech
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: _index
:END:
** Welcome
This will eventually be a blog.

* Emacs
:PROPERTIES:
:EXPORT_HUGO_SECTION: emacs
:EXPORT_HUGO_AUTO_SET_LASTMOD: t
:END:
The source for [[https://rymcg.tech/emacs]]

** def-advice
:PROPERTIES:
:EXPORT_FILE_NAME: def-advice
:END:

It's cool..

** second emacs post
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-post-2
:END:

Hi you gnu elpanizers

** first emacs post and a rather unfortunately long title that just goes on and on and on and on.
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-post-1
:END:

Hi emacsers!

*** Subheading 1

*** Subheading 2
** elisp tips
:PROPERTIES:
:EXPORT_FILE_NAME: elips-tips
:END:

#+BEGIN_SRC emacs_lisp
(message "Hi Emacsians!")
#+END_SRC

* Books
** book1
:PROPERTIES:
:EXPORT_HUGO_SECTION: book1
:END:
*** Book
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
Book 1 index.

This type of organization will generate this in the =content/=
directory:
#+BEGIN_EXAMPLE
> tree book1
book1
├── chapter1
│   ├── _index.md
│   ├── section1.md
│   └── section2.md
├── chapter2
│   ├── _index.md
│   ├── section1.md
│   └── section2.md
└── _index.md
#+END_EXAMPLE

- [[/book1/chapter1][Chapter 1]]
  - [[/book1/chapter1/section1][Chapter 1 Section 1]]
  - [[/book1/chapter1/section2][Chapter 1 Section 2]]
- [[/book1/chapter2][Chapter 2]]
  - [[/book1/chapter2/section1][Chapter 2 Section 1]]
  - [[/book1/chapter2/section2][Chapter 2 Section 2]]
*** chapter 1
:PROPERTIES:
:EXPORT_HUGO_SECTION: book1/chapter1
:END:
**** Chapter 1 Index
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
Introduction for chapter 1
**** sub section 1
:PROPERTIES:
:EXPORT_FILE_NAME: section1
:END:
Section 1 of chapter 1
**** sub section 2
:PROPERTIES:
:EXPORT_FILE_NAME: section2
:END:
Section 2 of chapter 1
*** chapter 2
:PROPERTIES:
:EXPORT_HUGO_SECTION: book1/chapter2
:END:
**** Chapter 2 Index
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
Introduction for chapter 2
**** sub section 1
:PROPERTIES:
:EXPORT_FILE_NAME: section1
:END:
Section 1 of chapter 2
**** sub section 2
:PROPERTIES:
:EXPORT_FILE_NAME: section2
:END:
Section 2 of chapter 2
* Footnotes
* COMMENT Local Variables                    :ARCHIVE:
# Local Variables:
# fill-column: 70
# eval: (auto-fill-mode 1)
# eval: (toggle-truncate-lines 1)
# eval: (add-hook 'after-save-hook #'org-hugo-export-subtree-to-md-after-save :append :local)
# End:
